
def localPlatform = platform() + arch()

configurations {

    baseCompile

    mac64.extendsFrom(baseCompile)
    windows32.extendsFrom(baseCompile)
    windows64.extendsFrom(baseCompile)
    linux32.extendsFrom(baseCompile)
    linux64.extendsFrom(baseCompile)

    compile.extendsFrom(configurations.getByName(localPlatform))
}

dependencies {
    baseCompile project (':basics-core')

    mac64 "org.eclipse.swt:org.eclipse.swt.cocoa.macosx.x86_64:4.3"
    mac64 project(":basics-ui-cocoa")

    windows32 "org.eclipse.swt:org.eclipse.swt.win32.win32.x86:4.3"
    windows64 "org.eclipse.swt:org.eclipse.swt.win32.win32.x86_64:4.3"
    linux32 "org.eclipse.swt:org.eclipse.swt.gtk.linux.x86:4.3"
    linux64 "org.eclipse.swt:org.eclipse.swt.gtk.linux.x86_64:4.3"
}

apply plugin: "com.jfrog.bintray"

publishing {
    configurations.each { configuration ->
        if (configuration.extendsFrom.contains(configurations.baseCompile)) {
            publications.create(configuration.name, MavenPublication) {
                artifactId "basics-ui-${configuration.name}"

                from components.java
                artifact sourceJar { classifier "sources" }
                artifact javadocJar { classifier "javadoc" }

                pom.withXml({
                    def pom = it.asElement()
                    def pomDeps = pom.getElementsByTagName('dependencies').item(0)
                    pom.removeChild(pomDeps)

                    def newDeps = it.asNode().appendNode('dependencies')
                    configuration.allDependencies.each{ dep ->
                        def node = newDeps.appendNode( 'dependency' )
                        node.appendNode( 'groupId', dep.group )
                        node.appendNode( 'artifactId', dep.name )
                        node.appendNode( 'version', dep.version )
                    }

                })
            }
        }
    }
}

static def arch() {
    def arch = System.getProperty('os.arch')
    switch (arch) {
        case "x86": case "amd": return "32"
        case "x86_64": case "amd64": return "64"
    }
    return arch
}

static def platform() {
    return System.getProperty('os.name').toLowerCase().split()[0]
}


bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

    publications = [ "mac64", "windows32", "windows64", "linux32", "linux64" ]

    pkg {
        name = project.group
        repo = 'maven'
        userOrg = 'jeancharles-roger'
        desc = 'Plug artifacts'
        vcsUrl = 'https://github.com/jeancharles-roger/fr.minibilles.basics'
        websiteUrl = 'https://github.com/jeancharles-roger/fr.minibilles.basics'
        licenses = ['MIT']
        publicDownloadNumbers = true
        override = true
        publish = true

        //Optional version descriptor
        version {
            name = project.version //Bintray logical version name
        }
    }
}
